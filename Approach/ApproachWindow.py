import PySimpleGUI as sg
import matplotlib.pyplot as plt
import pandas as pd
import os
import sys

defaultImg = ""

class ApWindow:

    def __init__(self,list,filename,windowName,N = 0,additionalfile = None,help_word = ''):
        self.otherOut = []
        self.namelist = list #approachs name
        self.N_approach = N 
        self.windowName = windowName
        self.help = help_word
        self.score = dict()
        # creat localsave to save time while need 
        savefoder = os.path.basename(filename)
        savefoder = savefoder[:savefoder.find(".")]
        self.savefoder = savefoder #str to crate picture and save some result

        self.data = pd.read_csv(filename) 
        for column in self.data.select_dtypes(exclude=['number']).columns:
            try:
                self.data[column] = pd.to_datetime(self.data[column])
            except:
                pass

        if additionalfile != None:
            self.adddata = pd.read_csv(additionalfile)
            for column in self.adddata.select_dtypes(exclude=['number']).columns:
                try:
                    self.adddata[column] = pd.to_datetime(self.adddata[column])
                except:
                    pass

    def addData(self):
        window = sg.Window("Choose another dataset",[[sg.Input(enable_events = True, key = "-IN-",expand_x = True),sg.FileBrowse("Select Additional Dataset(if you need)",key = "-DATASET-",file_types = (("ALL Files","*.csv"),))],[sg.Button("I don't need it",key = "-DNEED-"),sg.Button("Exit")]])
        while True:
            event,value = window.read()
            if event == "-DATASET-":
                print(value["-DATASET-"])
            if event == "Exit":
                try:
                    self.adddata = pd.read_csv(value["-IN-"])
                except:
                    return None
                print(value["-IN-"])
                print(self.adddata)
                window.close()
                break
            if event == "-DNEED-":
                window.close()
                return None
        window.close()
        return 0

    def saveScore(self,savepath):
        fp = open(savepath + "score.txt",mode = "w")
        fp.write(str(self.score))
        fp.close()
        return 0

    def make_fig(self,new = True):
    #save dir
        if len(self.savefoder) == 0 :
            savepath = os.path.dirname(sys.argv[0]) + "test/image/"
        else:
            savefoder_name = os.path.basename(self.savefoder)
            savefoder_name = savefoder_name[:savefoder_name.find(".")]
            savepath = os.path.dirname(sys.argv[0]) +"/" + self.savefoder +"/" + self.windowName
    #read old file img
        if new == False:
            if os.path.exists(savepath + self.windowName + ".png"):
                return savepath + self.windowName + ".png"
            else:
                return None

    #check if there have score
        if len(self.score) == 0:
            return None

        self.saveScore(savepath)

        x = self.score.keys()
        y = self.score.values()

    #plot data and type
        plt.figure()
        plt.bar(x,y)
        plt.ylim(0,max(105,max(y)))
        plt.xticks(rotation=20)
        for a,b in zip(x,y):
            plt.text(a,b + 1,b,ha = "center")

    #save as png
        try:
            plt.savefig(savepath + self.windowName + ".png")
        except Exception:
            os.makedirs(savepath)
            plt.savefig(savepath + self.windowName + ".png")
        return savepath + self.windowName + ".png"

    def adjust(self,values):
        values = list(self.score.values())
        if len(values) == 0:
            return 0
        mean = round(sum(values) / len(values),2)
        self.score['Mean'] = mean
        return 0

    def showWindow(self):
        cb = []#check boxes
        cb.append(sg.Text("Choose approach you wish to use.(Weight in the number)"))
        for i in range(self.N_approach):
            cb.append(sg.Checkbox(text = self.namelist[i],key = i))
            cb.append(sg.Spin([i for i in range(0,100)],initial_value = 100,key = self.namelist[i].replace(".py","")))
            cb.append(sg.Text("%"))
        layout = [cb,[sg.Button("Run"),sg.Button("Exit"),sg.Button("Help")],[sg.Multiline("",key = '-OUT-',expand_x=True,expand_y=True,justification='left'),sg.Image(filename = self.make_fig(new = False),data = defaultImg,key = "-OUTPUT-")]]
        window = sg.Window(self.windowName,layout)

        while True:
            event,values = window.read()
            if event in (None,"Exit"):
                break
            if event == "Run":
                text = [x.Text for x in cb if x.get()==True]
                out = '''{}
                select mode :{}
                '''.format(self.data,text)
                window["-OUT-"].update(out)#should be output part/ should be better
                self.approaches(select_approaches = text)
                self.adjust(values)
                window["-OUTPUT-"].update(filename = self.make_fig(self.savefoder))
                #formatting output
                output_str = "Score:\n"
                for key, value in self.score.items():
                    output_str += f"{key}: {value}\n"
                output_str += '\n'
                for i in self.otherOut:
                    output_str += i + '\n'

                window["-OUT-"].update(output_str)
            if event == "Help":
                sg.popup(self.help)
        window.close()

class clickWindow:
    list = []
    windowName = ""
    otherText = ""

    def __init__(self, list,windowName,otherText = ""):
        self.list = list# for checkbox
        self.windowName = windowName
        self.otherText = otherText
        return None

    def showWindow(self):
        cb = []
        text = None
        for i in self.list:
            cb.append(sg.Checkbox(text = i,key = i))
        if self.otherText == "":
            window = sg.Window(self.windowName,[cb,[sg.Button("ok")]])
        else:
            window = sg.Window(self.windowName,[[sg.Multiline(self.otherText,size = (120, 10), disabled = True)],cb,[sg.Button("ok")]])
        while True:
            event,values = window.read()
            if event == "ok":
                text = [x.Text for x in cb if x.get()==True]
                break
            if event == None:
                break
        window.close()
        return text

class RadioGroupsWindow:
    def __init__(self,windowName, lista, listb,data,adddata ):
        self.lista = lista
        self.listb = listb
        self.selectedOptionGroupA = None
        self.selectedOptionGroupB = None
        self.windowName = windowName
        self.data = data
        self.adddata = adddata
        self.score = {}

    def countCommonElements(self,df1, df2):
        commonElements = df1.isin(df2).values.sum()
        return commonElements


    def showWindow(self):
        layout = [
            [sg.Text('Select the column whose values you want to check for equality')],
            [sg.Frame('data', [[sg.Radio(item, 'groupA', key=f'groupA_{item}')] for item in self.lista])],
            [sg.Frame('addData', [[sg.Radio(item, 'groupB', key=f'groupB_{item}')] for item in self.listb])],
            [sg.Button('Run'),sg.Button('Exit')]
        ]
        self.window = sg.Window(self.windowName, layout)
        while True:
            event, values = self.window.read()
            if event == sg.WINDOW_CLOSED:
                break
            elif event == 'Exit':
                break
            elif event == 'Run':
                self.selectedOptionGroupA = None
                for item in self.lista:
                    if values[f'groupA_{item}']:
                        self.selectedOptionGroupA = item
                        break

                self.selectedOptionGroupB = None
                for item in self.listb:
                    if values[f'groupB_{item}']:
                        self.selectedOptionGroupB = item
                        break

                NCE = self.countCommonElements(self.data[self.selectedOptionGroupA],self.data[self.selectedOptionGroupB])#number of common elements
                newDict = {str(self.selectedOptionGroupA)+"-"+str(self.selectedOptionGroupB): NCE / len(self.data[self.selectedOptionGroupA]) * 100}
                self.score.update(newDict)
                sg.popup("There are " + str(NCE) + " elements are same in " + str(len(self.data[self.selectedOptionGroupA])))
        self.window.close()
        return self.score

class readWindow:
    def __init__(self, windowName, text):
        self.windowName = windowName
        self.text = text

    def showWindow(self):
        layout = [[sg.Text(self.text)],
                  [sg.Button('OK')]]

        window = sg.Window(self.windowName, layout)

        while True:
            event, values = window.read()
            if event == sg.WINDOW_CLOSED or event == 'OK':
                break

        window.close()

class QuestionWindow:
    def __init__(self,question):
        layout = [
            [sg.Text(question,font = (None,14))],
            [sg.Button('Yes'), sg.Button('No'),sg.Button('Uncertain')]
        ]

        self.window = sg.Window('Chosoe', layout)

    def changeQuestion(self,question):
        layout = [
            [sg.Text(question,font = (None,14))],
            [sg.Button('Yes'), sg.Button('No'),sg.Button('Uncertain')]
        ]

        self.window = sg.Window('Chosoe', layout)

    def showWindow(self):
        while True:
            event, values = self.window.read()
            if event in (sg.WINDOW_CLOSED, 'Yes', 'No','Uncertain'):
                break

        self.window.close()

        if event == 'Yes':
            return 1
        elif event == 'No':
            return 0
        elif event == "Uncertain":
            return 0.5
        else:
            return 0

class FileSelection:
    def __init__(self,text = 'Choose file you need'):
        layout = [
            [sg.Text(text)],
            [sg.Input(key='-FILE-', enable_events=True), sg.FileBrowse()],
            [sg.Button('Submit')]
        ]

        self.window = sg.Window('File Select', layout)

    def showWindow(self):
        while True:
            event, values = self.window.read()

            if event in (sg.WINDOW_CLOSED, 'Submit'):
                break

        self.window.close()
        try:
            return values['-FILE-']
        except:
            return None

class TextInput:
    def __init__(self,text):
        layout = [
            [sg.Text(text)],
            [sg.InputText(key='-INPUT-')],
            [sg.Button('Submit'), sg.Button('Exit')]
        ]

        self.window = sg.Window(text, layout)

    def showWindow(self):
        while True:
            event, values = self.window.read()

            if event == sg.WINDOW_CLOSED or event == 'Exit':
                break
            elif event == 'Submit':
                input_text = values['-INPUT-']
                sg.popup(input_text)
                break

        self.window.close()
        return input_text


